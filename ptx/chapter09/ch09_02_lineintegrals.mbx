

<section xml:id="ch09_02_lineintegrals">
  <title>Area and the Line-Integral</title>
  <objectives>
    <ul>
      <li>
        <p>
          motivate and practice performing line-integrals
        </p>
      </li>
    </ul>
  </objectives>

  <introduction>
    <p>
      In first semester calculus, we learned that the area under a function <m>f(x)</m> above the <m>x</m>-axis is given by <m>A = \int_a^b f(x) dx</m>. The quantity <m>dA= f(x) dx</m> represents a small bit of area whose length is <m>dx</m> and whose height is <m>f(x)</m>. To get the total area, we just added up the little bits of area, which is why
      <me>
        A=\int dA = \int_a^b f(x) dx.
      </me>
    </p>

    <exploration>
      <introduction>
        <p>
          Consider the surface in space that is below the function
          <m>f(x,y)=9-x^2-y^2</m> and above the curve <m>C</m> parametrized by
          <m>\vec r(t)=(2\cos t, 3\sin t)</m> for <m>t\in[0,2\pi]</m>. Think of this region as a metal plate that has been stood up with its base on <m>C</m> where the height above each spot is given by <m>z=f(x,y)</m>.
        </p>

        <aside>
          <p>
            <url href="http://www.youtube.com/watch?v=sYsMcqtXBrc&amp;list=PL04DF68E73B7ECD54&amp;index=1&amp;feature=plpp_video">Watch a YouTube video.</url>
          </p>

          <p>
            See <url href="http://aleph.sagemath.org/?z=eJx1j8EOgyAQRO98hTeBroniqQe-pFFjECupFQJro39ftPXQxN5mknk7sz1dYGXymi21yNZaEE-RSSq4siEqSEoezBQVI-jb6a4lRchBcGcY8UU0c4xv0C2vINlFUcHMe8o3Ezk1-5durENjpyA7o5AqO1ovU6-7FHAw6jHpEGT5zQbpWt8-NXqjGjdapHtRHtd8NgDnP0fZ5RQoGPzJkzBojSc1B0Dn-GRxjA-XPf8GnQ5jSA">Sage</url> for a picture of this sheet.
          </p>
        </aside>
      </introduction>
      <task>
        <aside>
          <p>
            See <xref ref="horse_track_chain_rule_introduction"/>
          </p>
        </aside>
        <p>
          Draw the curve <m>C</m> in the <m>xy</m>-plane.
        </p>
      </task>
      <task>
        <p>
          If we cut the curve up into lots of tiny bits, explain why the length of each bit is approximately
          <me>
            ds=\sqrt{(-2\sin t)^2+(3\cos t)^2}dt.
          </me>
        </p>
      </task>
      <task>
        <p>
          Explain why the area of the metal sheet that lies above <m>C</m> and under <m>f</m> is given by the integral
          <me>
            \sigma = \int_C f ds = \int_0^{2\pi}(9-(2\cos t)^2-(3\sin t)^2)\sqrt{(-2\sin t)^2+(3\cos t)^2}dt.
          </me>
          You'll need to explain why a little bit of surface area equals <m>d\sigma =fds</m>.
        </p>
      </task>
      <task>
        <aside>
          <p>
            This  <url href="\sagelineintegral">Sage worksheet</url> will compute the integral.
          </p>
        </aside>
        <p>
          Find the surface area of the metal sheet. [Use technology to do this integral.]
        </p>
        <sage>
          <input>
            ##The code below will find the surface area of a surface that lies below f(x,y) and above the curve r(t) in the xy plane.  
            f(x,y)=9-x^2-y^2
            r(t)=(2*cos(t), 3*sin(t))
            trange=(t,0,2*pi)

            ds=r.diff(t).norm()
            dA=f(x=r(t)[0],y=r(t)[1])*ds(t)

            # Let's make a function right off to evaluate an integral over this curve.  
            #We'll use a numerical integral, because sometimes we might not be able to get an exact integral.
            def line_integral(integrand):
                return RR(numerical_integral(integrand, trange[1], trange[2])[0])

            A = line_integral(dA(t))


            pretty_print(table([
            [r"$f(x,y)$",f(x,y)],
            [r"$\vec r(t)$",r(t)],
            [r"$d\vec r(t)/dt$",r.diff(t)(t)],
            [r"$ds$",ds(t)],
            [r"$d\sigma=f ds$",dA(t)],
            [r"$Surface Area = \sigma =\int_C f ds$",A],
            ]))




            #This section makes the plot of a the surface.
            r1(t,u)=(r(t)[0], r(t)[1],u*f(x=r(t)[0],y=r(t)[1]))
            curve_options=dict(color='red',thickness=3)
            curves=parametric_plot(r1(t,0), trange,**curve_options)+parametric_plot(r1(t,1),trange,**curve_options)
            sheet=parametric_plot(r1,trange,(u,0,1))
            show(curves+sheet)

            #If the integral is doable, then this will give the integral. 
            pretty_print("If the integral can be computed exactly by Sage, then it will eventually show up below.  Otherwise, you'll get a huge list of errors.")
            integrate(dA(t), trange)
          </input>
        </sage>
      </task>
    </exploration>

    <p>
      Our results from the exercise above suggest the following definition.
    </p>

    <definition>
      <title>Line Integral</title>
      <statement>
        <p>
          Let <m>f</m> be a function and let <m>C</m> be a piecewise smooth curve whose parametrization is <m>\vec r(t)</m> for <m>t\in[a,b]</m>. We'll require that the composition <m>f(\vec r(t))</m> be continuous for all <m>t\in [a,b]</m>. Then we define the line integral
          of <m>f</m> over <m>C</m> to be the integral
          <me>
            \int_C f ds 
            = \int_a^b f(\vec r(t))\frac{ds}{dt}dt
            = \int_a^b f(\vec r(t))\left|\frac{d\vec r}{dt}\right|dt.
          </me>
        </p>
        <aside>
          <p> 
            The line integral is also called the path integral, contour integral, or curve integral.
          </p>
        </aside>
      </statement>
    </definition>

    <aside>
      <p> 
        When we ask you to set up a line integral, it means that you should do steps 1<ndash />3, so that you get an integral with a single variable and with bounds that you could plug into a computer or complete by hand.
      </p>
    </aside>
    <p>
      Notice that this definition suggests the following four steps. These four steps are the key to computing any line integral. 
      <ol>
        <li>
          <p>
            Start by getting a parametrization <m>\vec r(t)</m> for <m>a\leq t\leq b</m> of the curve <m>C</m>.
          </p>
        </li>

        <li>
          <p>
            Find the speed by computing the velocity <m>\dfrac{d\vec r}{dt}</m> and then the speed <m>\left|\dfrac{d\vec r}{dt}\right|</m>.
          </p>
        </li>

        <li>
          <p>
            Multiply <m>f</m> by the speed, and replace each <m>x</m>, <m>y</m>, and/or <m>z</m> with what it equals in terms of <m>t</m>.
          </p>
        </li>

        <li>
          <p>
            Integrate the product from the previous step. Practice doing this by hand on every exercise, unless it specifically says to use technology. Some of the integrals are impossible to do by hand.
          </p>
          <aside>
            <p> 
              You should use the <url href="\sagelineintegral">Sage line integral calculator</url> to check all your answers.
            </p>
          </aside>

        </li>
      </ol>
    </p>
  </introduction>

  <subsection>
    <title>Exploring the Line-Integral</title>

    <exploration>
      <statement>
        <aside>
          <p>
            <url href="\sagelineintegral">Check your answer with Sage.</url>
          </p>
        </aside>
        <p>
          Let <m>f(x,y,z)=x^2+y^2-2z</m> and let <m>C</m> be two coils of the helix <m>\vec r(t)=(3\cos t, 3\sin t, 4t)</m>, starting at <m>t=0</m>. Remember that the parametrization means <m>x=3\cos t</m>, <m>y=3\sin t</m>, and <m>z=4t</m>. Compute <m>\int_Cf ds</m>. [You will have to find the end bound yourself.]
        </p>
        <p> 
          You can check your answer with the SageCell below.
        </p>
        <sage>
          <input>
            ##The code below will find the surface area of a surface that lies below f(x,y) and above the curve r(t) in the xy plane.  
            f(x,y)=9-x^2-y^2
            r(t)=(2*cos(t), 3*sin(t))
            trange=(t,0,2*pi)

            ds=r.diff(t).norm()
            dA=f(x=r(t)[0],y=r(t)[1])*ds(t)

            # Let's make a function right off to evaluate an integral over this curve.  
            #We'll use a numerical integral, because sometimes we might not be able to get an exact integral.
            def line_integral(integrand):
                return RR(numerical_integral(integrand, trange[1], trange[2])[0])

            A = line_integral(dA(t))


            pretty_print(table([
            [r"$f(x,y)$",f(x,y)],
            [r"$\vec r(t)$",r(t)],
            [r"$d\vec r(t)/dt$",r.diff(t)(t)],
            [r"$ds$",ds(t)],
            [r"$d\sigma=f ds$",dA(t)],
            [r"$Surface Area = \sigma =\int_C f ds$",A],
            ]))




            #This section makes the plot of a the surface.
            r1(t,u)=(r(t)[0], r(t)[1],u*f(x=r(t)[0],y=r(t)[1]))
            curve_options=dict(color='red',thickness=3)
            curves=parametric_plot(r1(t,0), trange,**curve_options)+parametric_plot(r1(t,1),trange,**curve_options)
            sheet=parametric_plot(r1,trange,(u,0,1))
            show(curves+sheet)

            #If the integral is doable, then this will give the integral. 
            pretty_print("If the integral can be computed exactly by Sage, then it will eventually show up below.  Otherwise, you'll get a huge list of errors.")
            integrate(dA(t), trange)
          </input>
        </sage>
      </statement>
      <hint>
        <p>
          How much time passes to go around two coils?
        </p>
      </hint>

    </exploration>

    <exploration>
      <todo> CHALLENGE </todo>
      <aside>
        <p>
          <url href="\sagelineintegral">Check your answer with Sage.</url>
        </p>
      </aside>
      <p>
        Consider the function <m>f(x,y)=3xy+2</m>. Let <m>C</m> be a circle of radius 4 centered at the origin. Compute <m>\int_C fds</m>. [You'll have to come up with your own parametrization.]
      </p>
      <p> 
        You can check your answer with the SageCell below.
      </p>
      <sage>
        <input>
          ##The code below will find the surface area of a surface that lies below f(x,y) and above the curve r(t) in the xy plane.  
          f(x,y)=9-x^2-y^2
          r(t)=(2*cos(t), 3*sin(t))
          trange=(t,0,2*pi)

          ds=r.diff(t).norm()
          dA=f(x=r(t)[0],y=r(t)[1])*ds(t)

          # Let's make a function right off to evaluate an integral over this curve.  
          #We'll use a numerical integral, because sometimes we might not be able to get an exact integral.
          def line_integral(integrand):
              return RR(numerical_integral(integrand, trange[1], trange[2])[0])

          A = line_integral(dA(t))


          pretty_print(table([
          [r"$f(x,y)$",f(x,y)],
          [r"$\vec r(t)$",r(t)],
          [r"$d\vec r(t)/dt$",r.diff(t)(t)],
          [r"$ds$",ds(t)],
          [r"$d\sigma=f ds$",dA(t)],
          [r"$Surface Area = \sigma =\int_C f ds$",A],
          ]))




          #This section makes the plot of a the surface.
          r1(t,u)=(r(t)[0], r(t)[1],u*f(x=r(t)[0],y=r(t)[1]))
          curve_options=dict(color='red',thickness=3)
          curves=parametric_plot(r1(t,0), trange,**curve_options)+parametric_plot(r1(t,1),trange,**curve_options)
          sheet=parametric_plot(r1,trange,(u,0,1))
          show(curves+sheet)

          #If the integral is doable, then this will give the integral. 
          pretty_print("If the integral can be computed exactly by Sage, then it will eventually show up below.  Otherwise, you'll get a huge list of errors.")
          integrate(dA(t), trange)
        </input>
      </sage>
    </exploration>

    <todo> CHALLENGE </todo>
    <exploration>
      <statement>
        <aside>
          <p>
            <url href="\sagelineintegral">Check your answer with Sage.</url>
          </p>
        </aside>
        <p>
          Let <m>f(x,y,z)=x^2+3yz</m>. Let <m>C</m> be the straight line segment from <m>(1,0,0)</m> to <m>(0,4,5)</m>. Compute <m>\int_C f ds</m>.
        </p>
        <p> 
          You can check your answer with the SageCell below.
        </p>
        <sage>
          <input>
            ##The code below will find the surface area of a surface that lies below f(x,y) and above the curve r(t) in the xy plane.  
            f(x,y)=9-x^2-y^2
            r(t)=(2*cos(t), 3*sin(t))
            trange=(t,0,2*pi)

            ds=r.diff(t).norm()
            dA=f(x=r(t)[0],y=r(t)[1])*ds(t)

            # Let's make a function right off to evaluate an integral over this curve.  
            #We'll use a numerical integral, because sometimes we might not be able to get an exact integral.
            def line_integral(integrand):
                return RR(numerical_integral(integrand, trange[1], trange[2])[0])

            A = line_integral(dA(t))


            pretty_print(table([
            [r"$f(x,y)$",f(x,y)],
            [r"$\vec r(t)$",r(t)],
            [r"$d\vec r(t)/dt$",r.diff(t)(t)],
            [r"$ds$",ds(t)],
            [r"$d\sigma=f ds$",dA(t)],
            [r"$Surface Area = \sigma =\int_C f ds$",A],
            ]))




            #This section makes the plot of a the surface.
            r1(t,u)=(r(t)[0], r(t)[1],u*f(x=r(t)[0],y=r(t)[1]))
            curve_options=dict(color='red',thickness=3)
            curves=parametric_plot(r1(t,0), trange,**curve_options)+parametric_plot(r1(t,1),trange,**curve_options)
            sheet=parametric_plot(r1,trange,(u,0,1))
            show(curves+sheet)

            #If the integral is doable, then this will give the integral. 
            pretty_print("If the integral can be computed exactly by Sage, then it will eventually show up below.  Otherwise, you'll get a huge list of errors.")
            integrate(dA(t), trange)
          </input>
        </sage>
      </statement>
      <hint>
        <p>
          If you've forgotten how to parametrize line segments, <xref ref="prob_line_equation_practice">see</xref>.
        </p>
      </hint>
    </exploration>

  <todo>
    \larsonfive{ See Larson 15.2: 120, 6370.  Some exercises give you a parametrization, some expect you to come up with one on your own.}
  </todo>

  <exploration>
    <introduction>
      <p>
        Let <m>f(x,y)=x^2+y^2-25</m>. Let <m>C</m> be the portion of the parabola <m>y^2=x</m> between <m>(1,-1)</m> and <m>(4,2)</m>. We want to compute <m>\int_C fds</m>.
      </p>

      <aside>
        <p>
          <xref ref="prob_parametric_curve_in_plane">See</xref> if you forgot how to parametrize plane curves.
        </p>
      </aside>

      <aside>
        <p>
          <url href="\sagelineintegral">Check your answer with Sage.</url>
        </p>
      </aside>

    </introduction>
    <task>
      <p>
        Draw the curve <m>C</m> and the function <m>f(x,y)</m> on the same 3D <m>xyz</m> axes.
      </p>
    </task>
    <task>
      <p>
        Without computing the line integral <m>\int_C fds</m>, determine if the integral should be positive or negative. Explain why this is so by looking at the values of <m>f(x,y)</m> at points along the curve <m>C</m>.  Is <m>f(x,y)</m> positive, negative, or zero, at points along <m>C</m>?
      </p>
    </task>
    <task>
      <statement>
        <p>
          Parametrize the curve and set up the line integral <m>\int_C f ds</m>.
        </p>
      </statement>
      <hint>
        <p>
          if you let <m>y=t</m>, then <m>x=</m>? What bounds do you put on <m>t</m>?
        </p>
      </hint>
    </task>
    <task>
      <p>
        Use technology to compute <m>\int_C fds</m> to get a numeric answer.  Was your answer the sign that you determined above?
      </p>
    </task>
    <conclusion>
      <sage>
        <input>
          ##The code below will find the surface area of a surface that lies below f(x,y) and above the curve r(t) in the xy plane.  
          f(x,y)=9-x^2-y^2
          r(t)=(2*cos(t), 3*sin(t))
          trange=(t,0,2*pi)

          ds=r.diff(t).norm()
          dA=f(x=r(t)[0],y=r(t)[1])*ds(t)

          # Let's make a function right off to evaluate an integral over this curve.  
          #We'll use a numerical integral, because sometimes we might not be able to get an exact integral.
          def line_integral(integrand):
              return RR(numerical_integral(integrand, trange[1], trange[2])[0])

          A = line_integral(dA(t))


          pretty_print(table([
          [r"$f(x,y)$",f(x,y)],
          [r"$\vec r(t)$",r(t)],
          [r"$d\vec r(t)/dt$",r.diff(t)(t)],
          [r"$ds$",ds(t)],
          [r"$d\sigma=f ds$",dA(t)],
          [r"$Surface Area = \sigma =\int_C f ds$",A],
          ]))




          #This section makes the plot of a the surface.
          r1(t,u)=(r(t)[0], r(t)[1],u*f(x=r(t)[0],y=r(t)[1]))
          curve_options=dict(color='red',thickness=3)
          curves=parametric_plot(r1(t,0), trange,**curve_options)+parametric_plot(r1(t,1),trange,**curve_options)
          sheet=parametric_plot(r1,trange,(u,0,1))
          show(curves+sheet)

          #If the integral is doable, then this will give the integral. 
          pretty_print("If the integral can be computed exactly by Sage, then it will eventually show up below.  Otherwise, you'll get a huge list of errors.")
          integrate(dA(t), trange)
        </input>
      </sage>      
    </conclusion>
  </exploration>

  <p>
    Work, flow, circulation, and flux are all examples of line integrals. Remember that work, flow, and circulation are
    <me>
      W=\int_C (\vec F\cdot \vec T)ds =\int_C (M,N)\cdot(dx,dy) =  \int_C Mdx+Ndy,
    </me>
    while the formula for flux is
    <me>
      \Phi=\int_C (\vec F\cdot \vec n)ds =\int_C (M,N)\cdot(dy,-dx) =  \int_C Mdy-Ndx.
    </me>
  </p>

  <p>
    Do you see how these are both the line integral of a function <m>f = \vec F\cdot \vec T</m> or <m>f=\vec F\cdot \vec n</m> along a curve <m>C</m>. The function <m>f</m> inside the integrand does not have to represent the height of a sheet. We'll use it to represent lots of things. Let's practice two more work/flux exercises, to sharpen our skills with these concepts.
  </p>

  <exploration>
    <introduction>
      <p>
        Let <m>\vec F=(-y,x+y)</m> and <m>C</m> be the triangle with vertices <m>(2,0)</m>, <m>(0,2)</m>, and <m>(0,0)</m>.
      </p>

      <aside>
        <p>
          <url href="http://www.youtube.com/watch?v=6WcN36FbeWc&amp;list=PL04DF68E73B7ECD54&amp;index=3&amp;feature=plpp_video">Watch a YouTube video</url>.  Also, see <url href="http://aleph.sagemath.org/?z=eJw9yjEKhDAQRuF-TzKDvxLTp80lgohodMMORjZBnNtvqm0-XvE8PVB21CueTvl1Sa7zHdeav_Oeomzk0ZZ-GGGHkUH6b-6uLHrkk0IwsBOChWma5oQ9iTi_SImo77R-zliKs_wDRwwhgQ">Sage</url> for a picture.
        </p>
      </aside>
    </introduction>
    <task>
      <p>
        Look at a drawing of <m>C</m> and the vector field (see margin for the Sage link).  We'll move along the triangle in a counter clockwise manner. Without doing any computations, for each side of the triangle make a guess to determine if the flow along that edge is positive, negative, or zero. Similarly, guess the sign of the flux along each edge.  Explain.
      </p>
    </task>
    <task>
      <p>
        Obtain three parametrizations for the triangle, one for each edge.  One of the parametrizations is <m>\vec r(t) = (0,-2)t+(0,2)</m>.
      </p>
    </task>
    <task>
      <p>
        Now find the counterclockwise circulation (work) done by <m>\vec F</m> along <m>C</m>.  You'll have three separate calculations, one for each side. We'll do the flux computation in class. 
        Check your work on each piece with the <url href="http://bmw.byuimath.com/dokuwiki/doku.php?id=both_flux_and_work">Sage calculator</url> or in the cell below.
      </p>
      <sage>
        <input>
          var('x,y,t')
          F=vector([-y,x])
          #F=vector([2*x+y,-x+2*y]) #Uncomment this line for a different field.
          r=vector([5*cos(t), 5*sin(t)])
          tstart=0
          tend=2*pi

          vector_field_bounds = ((x,-6,6), (y,-6,6))


          # Let's make a function right off to evaluate an integral over this curve.
          def line_integral(integrand):
              return RR(numerical_integral((integrand).subs(x=r[0], y=r[1]), tstart, tend)[0])

          dr=diff(r,t)
          dW=F(x=r[0], y=r[1])*dr # Multiplying two vectors together gives the dot product
          W=line_integral(dW)

          nds(t) = (dr[1], -dr[0])
          dFlux=F(x=r[0], y=r[1])*nds
          Flux=line_integral(dFlux)


          # TABLE
          pretty_print(table([
          [r"$\vec F(x,y)$", F],
          [r"$\vec r(t)$", r],
          [r"$t$ range", (t, tstart, tend)],
          [r"$d\vec r$", dr],
          [r"$\vec F(\vec r(t))$", F(x=r[0], y=r[1])],
          [r"$dW=\vec F \cdot d\vec r$", dW],
          [r"$W=\int dW=\int \vec F \cdot d\vec r$", W],
          [r"$\vec n ds$", nds(t)],
          [r"$dFlux=F\cdot n ds = M dy - N dx$", dFlux(t)],
          [r"Flux=$\int dFlux=\int F\cdot n ds = \int Mdy-Ndx$", Flux]
          ]))

          # PLOT
          @interact
          def _(state=["flow","flux"]):
              p=plot_vector_field(F, *vector_field_bounds)
              p+= parametric_plot(r, (t, tstart, tend),thickness=3)
              if state=="flow":
                  for i in srange(tstart, tend, (tend-tstart)/18):
                      p += arrow(r(t=i), (r+ .5*dr)(t=i),color='red')
              elif state=="flux":
                  for i in srange(tstart, tend, (tend-tstart)/18):
                      p += arrow(r(t=i), (r+ .5*nds)(t=i),color='green')
              
              show(p, aspect_ratio=1)
        </input>
      </sage>
    </task>
  </exploration>

  <exploration>
    <introduction>
      <p>
        Consider the vector field <m>\vec F=(2x-y,x)</m>. Let <m>C</m> be the curve that starts at <m>(-2,0)</m>, follows a straight line to <m>(1,3)</m>, and then back to <m>(-2,0)</m> along the parabola <m>y=4-x^2</m>.
      </p>
      <p>
        The first cell plots this vector field (same as link in margin). The second provides the Work-Flux calculations. Save those for checking your work after the exercise.
      </p>
      <sage>
        <input>
          F(x,y)=(2*x-y,x)
          plot_vector_field(F,(x,-2,1),(y,0,4))+line([[-2,0],[1,3]],thickness=2)+plot(4-x^2,(x,-2,1),thickness=2)
        </input>
      </sage>
      <sage>
        <input>
          var('x,y,t')
          F=vector([-y,x])
          #F=vector([2*x+y,-x+2*y]) #Uncomment this line for a different field.
          r=vector([5*cos(t), 5*sin(t)])
          tstart=0
          tend=2*pi

          vector_field_bounds = ((x,-6,6), (y,-6,6))


          # Let's make a function right off to evaluate an integral over this curve.
          def line_integral(integrand):
              return RR(numerical_integral((integrand).subs(x=r[0], y=r[1]), tstart, tend)[0])

          dr=diff(r,t)
          dW=F(x=r[0], y=r[1])*dr # Multiplying two vectors together gives the dot product
          W=line_integral(dW)

          nds(t) = (dr[1], -dr[0])
          dFlux=F(x=r[0], y=r[1])*nds
          Flux=line_integral(dFlux)


          # TABLE
          pretty_print(table([
          [r"$\vec F(x,y)$", F],
          [r"$\vec r(t)$", r],
          [r"$t$ range", (t, tstart, tend)],
          [r"$d\vec r$", dr],
          [r"$\vec F(\vec r(t))$", F(x=r[0], y=r[1])],
          [r"$dW=\vec F \cdot d\vec r$", dW],
          [r"$W=\int dW=\int \vec F \cdot d\vec r$", W],
          [r"$\vec n ds$", nds(t)],
          [r"$dFlux=F\cdot n ds = M dy - N dx$", dFlux(t)],
          [r"Flux=$\int dFlux=\int F\cdot n ds = \int Mdy-Ndx$", Flux]
          ]))

          # PLOT
          @interact
          def _(state=["flow","flux"]):
              p=plot_vector_field(F, *vector_field_bounds)
              p+= parametric_plot(r, (t, tstart, tend),thickness=3)
              if state=="flow":
                  for i in srange(tstart, tend, (tend-tstart)/18):
                      p += arrow(r(t=i), (r+ .5*dr)(t=i),color='red')
              elif state=="flux":
                  for i in srange(tstart, tend, (tend-tstart)/18):
                      p += arrow(r(t=i), (r+ .5*nds)(t=i),color='green')
              
              show(p, aspect_ratio=1)
        </input>
      </sage>
      <aside>
        <p>
          See <url href="http://aleph.sagemath.org/?z=eJxNjEEOQDAUBfdO8j-vSZWtrUs0ZUFFo0FopL09VmwnM9NSROKGVB5FQuRs91voLzuE7egnZ_1ILR5HKJQMSpComQvvVktaP1Qa6BKVMQizG5bVnmejuHg3VIvYqa_-CzduCCO3">Sage</url>. Think of an airplane wing as you solve this exercise.
        </p>
      </aside>
    </introduction>
    <task>
      <p>
        Look at a drawing of <m>C</m> and the vector field (see margin for the Sage link).  If we go counterclockwise around <m>C</m>, for each part of <m>C</m>, guess the signs of the counterclockwise circulation and the flux (positive, negative, zero).
      </p>
    </task>
    <task>
      <statement>
        <p>
          Find the flux of <m>\vec F</m> across <m>C</m>.  There are two curves to parametrize. Make sure you traverse along the curves in the correct direction.
        </p>
      </statement>
      <hint>
        <p>
          You should get integer values along both parts. Check your work with <url href="http://bmw.byuimath.com/dokuwiki/doku.php?id=both_flux_and_work">Sage</url> or the cells above, but make sure you show us how to do the integrals by hand.
        </p>
      </hint>
    </task>
  </exploration>

  <p>
    Go back and do the optional exercises if you get here!
  </p>

  <p>
    Ask me in class to change the vector fields above, and examine what happens with different vectors fields. In particular, it's possible to have any combination of values for circulation and flux. We'll be able to use technology to rapidly compute many values.
  </p>
</subsection>

  <exercises>
    <title>Computational Practice</title>
    <introduction>
      <p>
        These are provided to help you achieve better skills in basic computational answers.
      </p>
    </introduction>

    <exercise>
      <webwork source="Library/Michigan/Chap18Sec1/Q21.pg" />
    </exercise>

    <exercise>
      <webwork source="Library/Hope/Multi2/11-06-Scalar-line-integrals/Scalar-line-integral-04.pg" />
    </exercise>

    <exercise>
      <webwork source="Library/FortLewis/Calc3/18-2-Line-integrals-parametrized/HGM4-18-2-00-Line-integrals-parametrized.pg" />
    </exercise>

    <exercise>
      <webwork source="Library/FortLewis/Calc3/18-2-Line-integrals-parametrized/HGM4-18-2-08a-Line-integrals-parametrized.pg" />
    </exercise>

    <exercise>
      <webwork source="Library/FortLewis/Calc3/18-1-Idea-of-line-integrals/HGM5-18-1-09-Line-integrals.pg" />
    </exercise>


  </exercises>

</section>

