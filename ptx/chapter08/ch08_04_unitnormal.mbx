

<section xml:id="ch08_04_unitnormal">
  <title>More Practice</title>
  <objectives>
    <ul>
      <li>
        <p>
          Motivate and compute the <em>Unit Normal</em> and <em>Binormal Vectors</em>
        </p>
      </li>
    </ul>
  </objectives>

  <introduction>
    <p>
      Our <xref ref="curvature_observations">observation</xref> still holds. It looks like we've found some key facts that pertain to any curve. We only have 3 examples to justify our conclusion, but it's enough to make some definitions and then seek for a concrete proof that holds for every smooth curve.
    </p>

    <p>
      Let's prove one of the facts above, namely that <m>\vec T</m> and its derivative will always be orthogonal. The key here is that <m>\vec T</m> is a vector of constant length.
    </p>

    <theorem xml:id="vector_valued_functions_of_constant_length">
      <title>Vector Valued Functions of Constant Length</title>
      <statement>
        <p>
          If a vector valued function <m>\vec r(t)</m> has constant length, then the vector <m>\vec r</m> and its derivative <m>\ds\frac{d\vec r}{dt}</m> are always orthogonal. Vector valued functions of constant length are orthogonal to their derivative.
        </p>
      </statement>
    </theorem>

    <exploration>
      <title>Optional Proof of Vector Valued Functions of Constant Length Theorem</title>
      <introduction>
        <p>
          Prove the theorem above. Here are some hints [as an alternative to watching the YouTube video].
        </p>

        <aside>
          <p>
            Watch a <url href="http://www.youtube.com/watch?v=08Ygw_M-4yM&amp;list=PL30EE81142B1ED1F0&amp;index=6&amp;feature=plpp_video">YouTube Video</url> for the answer.
          </p>
        </aside>
      </introduction>
      <task>
        <p>
          We know that <m>\vec r(t)</m> has constant length, so we write <m>|\vec r|=c</m> for some constant <m>c</m>.
        </p>
      </task>
      <task>
        <p>
          We need to get from a magnitude to a dot product. Look in your text for a way to relate magnitude to the dot product. See <xref ref="dot_product_facts"/>.
        </p>
      </task>
      <task>
        <p>
          After writing <m>|\vec r(t)|=c</m> in terms of a dot product (squaring both sides may help), take the derivative of both sides. Apply the product rule to the dot product.
        </p>
      </task>
    </exploration>

    <p>
      The above fact is so crucial, that we'll repeat what it says.
    </p>

    <blockquote>
      <p>
        If the vector <m>\vec v(t)</m> has constant length, then the vector and its derivative <m>\frac{d\vec v}{dt}</m> are orthogonal.
      </p>
    </blockquote>

    <exploration xml:id="T_and_N_are_orthogonal">
      <introduction>
        <p>
          Let <m>\vec r</m> be a smooth parametrization of a curve.
        </p>

        <aside>
          <p>
            Watch a <url href="http://www.youtube.com/watch?v=aJttU3kS_p8&amp;list=PL30EE81142B1ED1F0&amp;index=7&amp;feature=plpp_video">YouTube Video</url>.
          </p>
        </aside>
      </introduction>
      <task>
        <p>
          How long is the <em>unit</em> tangent vector <m>\vec T(t)</m>?
        </p>
      </task>
      <task>
        <p>
          Explain why <m>\vec T</m> is orthogonal to <m>\dfrac{d\vec T}{dt}</m>.
        </p>
      </task>
      <task>
        <p>
          Then give a formula for computing a unit vector that is orthogonal to <m>\vec T(t)</m>.
        </p>
      </task>
    </exploration>

    <p>
      Based on our answer above, let's make the following definition of the principle unit normal vector. The key idea is that this vector points in the direction of normal acceleration.
    </p>

    <definition>
      <title>Principle Unit Normal Vector</title>
      <statement>
        <p>
          Suppose <m>\vec r(t)</m> is a smooth parametrization of a space curve, where the unit tangent vector is <m>\vec T(t)</m>.
          We define the principle unit normal vector <m>\vec N(t)</m> to be the vector
          <me>
            \vec N(t) = \ds\frac{d\vec T/dt}{|d\vec T/dt|},
          </me>
          provided of course that <m>|d\vec T/dt|\neq 0</m>.
          From <xref ref="T_and_N_are_orthogonal"/> we know that <m>\vec T</m> and <m>\vec N</m> are orthogonal.
        </p>
      </statement>
    </definition>

    <p>
      The vector <m>\vec N</m> is a unit vector in the same direction as the curvature vector. Since <m>\dfrac{d\vec T}{dt}</m> and <m>\dfrac{d\vec T}{ds}</m> point in the same direction, we could have written <m>\vec N = \dfrac{d\vec T/ds}{|d\vec T/ds|} = \dfrac{\vec \kappa}{\kappa}</m>.
    </p>
  </introduction>

  <subsection>
    <title>The Binormal Vector</title>
    <p>
      The vectors <m>\vec T</m> and <m>\vec N</m> give us exactly the pieces needed to describe velocity and acceleration. We'll visit this more in a bit. When we are in 3D, these two vectors describe a plane. The binormal vector of the TNB frame is the normal vector to this plane.
    </p>

    <definition>
      <title>Binormal Vector</title>
      <statement>
        <p>
          If <m>\vec r</m> is a parametrization of a smooth space curve with unit tangent vector <m>\vec T</m> and principle unit normal vector <m>\vec N</m>, then we define the binormal vector <m>\vec B</m> to be the cross product
          <me>
            \vec B = \vec T\times \vec N.
          </me>
        </p>

        <p>
          It's normal to both <m>\vec T</m> and <m>\vec N</m>, hence called the <term>bi</term>normal vector.
        </p>
      </statement>
    </definition>

    <p>
      We now have the entire <m>TNB</m> frame. This gives us a moving collection of unit vectors that act like an <m>xyz</m> coordinate system. Many of you will use this frame a ton in your dynamics course. The TNB frame shows up in physical chemistry as well. A key fact to remember is that all three vectors are unit vectors, and they are each orthogonal to the other.
    </p>

    <project>
      <statement>
        <p>
          Find the area of a parallelogram with corners <m>(0,0,0)</m>, <m>(1,0,2)</m>, and <m>(1,1,3)</m>, and <m>(2,1,5)</m>.
        </p>
      </statement>
      <solution>
        <p>
          We find area of a parallelogram by the vectors that form the edges. Since one point is the origin (subtracting it from the 2nd and 3rd points won't change anything), we compute the cross product
          <m>(1,0,2)\times 
          (1,1,3) 
          = (-2,-1,1)</m>. The magnitude of the cross product is the area <m>A = \sqrt{4+1+1}=\sqrt{6}</m>.
        </p>
      </solution>

    </project>

    <exploration>
      <introduction>
        <p>
          Answer the following questions (this will review your knowledge of the dot and cross products).
        </p>
      </introduction>
      <task>
        <p>
          What is <m>\vec T\cdot \vec N</m>? Explain.
        </p>
      </task>
      <task>
        <p>
          Now explain why <m>\vec T\cdot \vec B=0</m> and <m>\vec N\cdot \vec B=0</m>.
        </p>
      </task>
      <task>
        <p>
          Both <m>\vec T</m> and <m>\vec N</m> are unit vectors. They are also orthogonal. Why is <m>\vec B</m> is a unit vector? [What's the connection between the cross product and area.]
        </p>
      </task>
      <task>
        <statement>
          <p>
            We defined <m>\vec B=\vec T\times \vec N</m>. This means that <m>\vec N\times \vec T=-\vec B</m>.  Do we have <m>\vec T\times \vec B</m> equal to <m>\vec N</m> or <m>-\vec N</m>? Explain.
          </p>
        </statement>
        <hint>
          <p>
            What does the right hand rule say? Compare to <m>\hat i\times \hat k</m>.
          </p>
        </hint>
      </task>
    </exploration>

    <p>
      Let's carry through a single exercise where we compute <m>\vec T</m>, <m>\vec N</m>, and <m>\vec B</m>.
    </p>

    <exploration xml:id="helix_example_of_T_N_and_B">
      <p>
        Consider the helix <m>\vec r(t) = (3\cos t,3\sin t, 4t)</m>. Find the unit tangent vector <m>\vec T(t)</m>, principle unit normal vector <m>\vec N(t)</m>, and the binormal vector <m>\vec B(t)</m>.
      </p>
    </exploration>
  </subsection>

  <subsection>
    <title>Concluding Thoughts on TNB</title>
    <p>
      You've now developed the TNB frame for describing motion. Engineers will see this again when they study dynamics. Mathematicians who study differential geometry will use these ideas as well. Any time you want to analyze the forces acting on a moving object, the TNB frame may save the day. Chemists will encounter the TNB frame briefly when they study P-chem and the motion of subatomic particles.
    </p>

    <project>

      <p>
        If you are standing at <m>(2,1,-3)</m> and you wish to move 6 units in the direction of the unit vector <m>(1/3, 2/3, -2/3)</m>, where are you? See<fn>We want to start at <m>(2,1,-3)</m> and move <m>6(1/3, 2/3, -2/3) = (2,4,-4)</m>. We just add the vectors, giving <m>(4,5,-7)</m>.</fn>for an answer.
      </p>

    </project>

    <exploration>
      <title>Extra Practice</title>
      <introduction>
        <p>
          Consider the helix <m>\vec r(t)=(t,\sin t,\cos t)</m>.
        </p>

        <aside>
          <p>
            Use this <url href="\sageurlforcurvature">Sage link</url> (or use the SageMath Cell at the end) to check your work, and see if your picture is correct. You'll have to type the appropriate function in, so use <q>[t,sin(t),cos(t)]</q> and <q>point=pi/2.</q>
          </p>
        </aside>
      </introduction>
      <task>
        <p>
          Find the curvature and radius of curvature <m>t=\pi/2</m>.
        </p>
      </task>
      <task>
        <p>
          Draw the curve, and draw the circle of curvature at <m>t=\pi/2</m>.
        </p>
      </task>
      <task>
        <p>
          Finally, find the center of curvature at <m>t=\pi/2</m>.
        </p>
      </task>
      <task>
        <statement>
          <p>
            Take a guess at the center of curvature at <m>t=\pi</m>?
          </p>
        </statement>
        <hint>
          <p>
            If you're struggling with how to get from the curve to the center of curvature, please do the review exercise above.
          </p>
        </hint>
      </task>
      <conclusion>
        <sage>
          <input>
            var('t')                 ##declare the variables you'll use below.
            r(t)=[(1*t),(1*t)^2]     ##Give a parametrization of the curve
            tBounds=(t,-2,2)         ##State the bounds you want in your plot
            point=1                  ##Give a t-value at which you would like to draw all vectors.

            ##Computation time
            v=diff(r,t)              #compute the velocity
            a=diff(v,t)              #compute the acceleration
            speed = v.norm()         #.norm() computes the length of a vector.
            T = v/speed              #compute the unit tangent vector
            dTdt = diff(T,t)         #compute dT/dt
            dTds = diff(T,t)/speed   #compute dT/ds (the curvatuve vector)
            curvature = dTds.norm()  #the curvatuve is the length of the curvatuve vector.
            N = dTdt/dTdt.norm()     #The unit normal vector

            ##Print the results.  I added .simplify_full().simplify_trig() to the end of each, so that the results will look simplified.
            table([
            [r"$\vec r$",r(t).simplify_full().simplify_trig()],
            [r"$\vec v$",v(t).simplify_full().simplify_trig()],
            [r"$\vec a$",a(t).simplify_full().simplify_trig()],
            [r"$\frac{ds}{dt} = |\vec v| = $ speed",speed(t).simplify_full().simplify_trig()],
            [r"$\vec T$",T(t).simplify_full().simplify_trig()],
            [r"$\frac{d\vec T}{dt}$",dTdt(t).simplify_full().simplify_trig()],
            [r"$\frac{d\vec T}{ds}$",dTds(t).simplify_full().simplify_trig()],
            [r"$\left|\frac{d\vec T}{ds}\right| = \kappa $",curvature(t).simplify_full().simplify_trig()],
            [r"$\vec N$",N(t).simplify_full().simplify_trig()],
            ])


            ##Print the results.  I added .simplify_full().simplify_trig() to the end of each, so that the results will look simplified.
            print "At the time t = ",point, " we have the following:"
            table([
            [r"$\vec r$",r(point).simplify_full().simplify_trig()],
            [r"$\vec v$",v(point).simplify_full().simplify_trig()],
            [r"$\vec a$",a(point).simplify_full().simplify_trig()],
            [r"$\frac{ds}{dt} = |\vec v| = $ speed",speed(point).simplify_full().simplify_trig()],
            [r"$\vec T$",T(point).simplify_full().simplify_trig()],
            [r"$\frac{d\vec T}{dt}$",dTdt(point).simplify_full().simplify_trig()],
            [r"$\frac{d\vec T}{ds}$",dTds(point).simplify_full().simplify_trig()],
            [r"$\left|\frac{d\vec T}{ds}\right| = \kappa $",curvature(point).simplify_full().simplify_trig()],
            [r"$\vec N$",N(point).simplify_full().simplify_trig()],
            ])

            ##Now let's make a graph
            p=parametric_plot(r,tBounds)                                        #this draws the curve
            p+=plot(vector(r(point)), width=4, color='gray')
            p+=plot(vector(v(point)), start=r(point), width=4, color='red')
            p+=plot(vector(a(point)), start=r(point), width=4, color='green')
            p+=plot(vector(T(point).simplify_full().simplify_trig()), start=r(point), width=4, color='black')
            p+=plot(vector(N(point).simplify_full().simplify_trig()), start=r(point), width=4, color='purple')
            p+=plot(vector(dTdt(point).simplify_full().simplify_trig()), start=r(point), width=4, color='yellow')
            p+=plot(vector(dTds(point).simplify_full().simplify_trig()), start=r(point), width=4, color='blue')

            print "Here's a plot of r, with the vectors v and a drawn at a point."
            print "gray-dashed = r, red = v, green = a, black = T, yellow = dT/dt, blue = dT/ds, purple=N"

            show(p)

            radiusOfCurvature=1/curvature(point)                    #compute the radius of curvature
            centerOfCurvature=r(point)+radiusOfCurvature*N(point)   #compute the center of curvature

            table([
            [r"$\rho$",radiusOfCurvature.simplify_full().simplify_trig()],
            [r"center of curvature", centerOfCurvature.simplify_full().simplify_trig()],
            ])

            #Draw the circle of curvature on top of everything else.
            p+=parametric_plot(
                vector(centerOfCurvature.simplify_full().simplify_trig())
                +radiusOfCurvature.simplify_full().simplify_trig()
                *( vector(T(point).simplify_full().simplify_trig())*cos(t)
                  +vector(N(point).simplify_full().simplify_trig())*sin(t))
                ,(t,0,2*pi),color='gray')
            show(p)

            print "If you are in 3D, then this will compute B and dB/ds for you. Otherwise, you'll get a lot of errors."

            B=T.cross_product(N)
            dBds = B.diff(t)/speed

            table([
            [r"$N(t)$",B(t).simplify_full().simplify_trig()],
            [r"$B(t)$",B(t).simplify_full().simplify_trig()],
            [r"$\frac{d\vec B}{ds}(t)$", dBds(t).simplify_full().simplify_trig()],
            [r"$\left|\frac{d\vec B}{ds}(t)\right|$", dBds(t).norm().simplify_full().simplify_trig()],
            ["",r"Remember to compare $\vec N$ and $d\vec B/ds$ to determine torsion"],
            [r"$N(point)$",N(point).simplify_full().simplify_trig()],
            [r"$B(point)$",B(point).simplify_full().simplify_trig()],
            [r"$\frac{d\vec B}{ds}(point)$", dBds(point).simplify_full().simplify_trig()],
            [r"$\left|\frac{d\vec B}{ds}(point)\right|$", dBds(point).norm().simplify_full().simplify_trig()],
            ])
          </input>
        </sage>
      </conclusion>
    </exploration>

    <p>
      When a civil engineering team builds a road, they have to pay attention to the curvature of the road. If the curvature of the road is too large, accidents will happen and the civil engineering team will be liable. How do they make sure the curvature never gets to large? They use the circle of curvature. When they want to cause a road to turn, they'll find the center of curvature, send a surveyor out to the center, and then have the surveyor make sure that the road follows the circle of curvature for a short distance. They actually pace out the circle of curvature and then build the road along this circle for a hundred feet or so. Then, they recompute the radius of curvature (if they need the direction to change again), and pace out another circle. In this way, they can guarantee that the curvature never gets large. In the next section we'll see how curvature is directly related to normal acceleration (which is what causes semis to tip, and vehicles to slide off icy roads.)
    </p>
  </subsection>

  <exercises>
    <title>Computational Practice</title>
    <introduction>
      <p>
        These are provided to help you achieve better skills in basic computational answers.
      </p>
    </introduction>

    <exercise>
      <webwork source="Library/272/setStewart13_3/problem_4.pg" />
    </exercise>

    <exercise>
      <webwork source="Library/272/setStewart13_3/problem_5.pg" />
    </exercise>

  </exercises>
  
</section>

